//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Packages/com.magicleap.unitysdk/Runtime/Subsystems/Input/MagicLeapInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MagicLeapInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MagicLeapInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MagicLeapInputs"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""8eedf83d-1eff-4251-89b7-c1c139a7c198"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""782332fa-2273-4618-8f7e-84a41f6d6ebd"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""d5979c49-d013-42f9-8dab-89874a22c458"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""95e5eff8-9fa6-452e-b4a7-c0c188e9d309"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AngularVelocity"",
                    ""type"": ""Value"",
                    ""id"": ""381d77d8-cbb0-4ef1-8d16-06f5c61502dc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Value"",
                    ""id"": ""8c1cc915-583a-4678-a2df-bfa0bec177e2"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AngularAcceleration"",
                    ""type"": ""Value"",
                    ""id"": ""846b9105-98b1-4d2f-8df9-f72b4b4f4acf"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""9df2a2c8-6ddc-45b2-9d58-e51400007121"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bumper"",
                    ""type"": ""Button"",
                    ""id"": ""f2975b5b-2e25-479b-8eee-be572a216ece"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerButton"",
                    ""type"": ""Button"",
                    ""id"": ""f4dfb82b-918e-4409-87dc-c7b18cbe91fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""44d463b3-8ef3-4957-b35e-d6e1510bdff5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerHold"",
                    ""type"": ""Value"",
                    ""id"": ""4fa217d0-eb67-479f-899a-cd3c98e04377"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchpadPosition"",
                    ""type"": ""Value"",
                    ""id"": ""469d249d-c91c-49e9-a777-ef61b9d6f690"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchpadClick"",
                    ""type"": ""Button"",
                    ""id"": ""58fdbe06-4c4c-4ee5-b158-8821a389e434"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchpadTouch"",
                    ""type"": ""Button"",
                    ""id"": ""d999b57b-4150-44fe-b1e4-faa3c21d49cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchpadForce"",
                    ""type"": ""Button"",
                    ""id"": ""ededf6a4-0744-40ab-8120-fa5751638b2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ecce99d5-5a3a-414e-83a8-ddc154834be9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ca5f855e-2ff0-43c8-8a13-e3b1b04a9bc3"",
                    ""expectedControlType"": ""Haptic"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""49923f1a-79fe-49cc-9aa5-a48de7762f2c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""837e19dd-ccc0-4adf-a347-a9d8e1fa69a8"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""4c3699cf-2b98-456d-95c2-03c99e8b8740"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1d74f8f-8b4e-4573-8619-e97f7aecf52b"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""TouchpadPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""290b9ffa-9543-4459-a7ee-ba5a76a5c3d8"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""TouchpadClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f55725b6-acbf-41ba-a8c1-a5d601f52fb0"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxisTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""TouchpadTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbfa7afb-1011-4c91-bf0b-ed43b1af1d23"",
                    ""path"": ""<XRController>{RightHand}/haptic"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Haptic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a017191-64bb-4891-8ed5-0bb1d54a98b2"",
                    ""path"": ""<XRController>{RightHand}/{secondary2DAxisForce}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""TouchpadForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1104e8e-4806-44b7-bb74-8e73b4aa936a"",
                    ""path"": ""<MagicLeapController>/mlcontrollertouch1force"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchpadForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f37fea1c-d4d8-4d9e-8698-ed7479b825c2"",
                    ""path"": ""<XRController>{RightHand}/{trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""fca4df74-51c9-4e3b-8493-82182c76d7fe"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""3704ef6d-5360-40eb-b1b7-198762493f8d"",
                    ""path"": ""<MagicLeapController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""47a4ccbf-ec6b-4323-8078-2aa08c005c0c"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""a4891611-bb2b-419e-ad11-11a756ed461d"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""fe13a61d-ab1e-4f06-b282-d3c1d2d98d9a"",
                    ""path"": ""<MagicLeapController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""a1240932-fca5-4cc1-a010-e7cedee497ba"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""94f39bde-dd13-48bf-be85-e1df6ed5983b"",
                    ""path"": ""<XRInputV1::MagicLeap::MagicLeapController>/istracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bec27350-beb9-42ee-9274-badd7d9e6e68"",
                    ""path"": ""<XRController>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c5bf46f-92ba-4c59-bee8-7762907931e1"",
                    ""path"": ""<XRController>{RightHand}/{triggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec778a53-15f1-40ca-887d-f212c1ba4d21"",
                    ""path"": ""<XRController>{RightHand}/{gripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""664b2792-0666-4de1-898d-79ea48c10db5"",
                    ""path"": ""<XRController>{RightHand}/{trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""461cdbcc-0a4f-49b6-862b-6348d7d28003"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""45f5e3f3-95f8-4009-9abc-fd8c5e1623c1"",
                    ""path"": ""<MagicLeapController>/deviceVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""006cfbf8-ce0f-494c-afee-bf7a832ac8e5"",
                    ""path"": ""<XRController>{RightHand}/deviceVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""ac45a114-3d9b-4c20-af7a-18cf907b694e"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""4854d33c-c430-4bd7-ba07-4d3f761f0712"",
                    ""path"": ""<MagicLeapController>/deviceAcceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""84b848e0-d367-4fe6-9a71-5beda8307e3d"",
                    ""path"": ""<XRController>{RightHand}/deviceAcceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""be958df2-a832-4ea3-bfc8-a5802a9ca6af"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AngularVelocity"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""dbdb9f13-a2be-41e7-aecf-5e8db53b8edd"",
                    ""path"": ""<MagicLeapController>/deviceAngularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AngularVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""9be70333-bde9-446e-9882-bbe8b3fdd45e"",
                    ""path"": ""<XRController>{RightHand}/deviceAngularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AngularVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""12b91cf2-914c-4e30-84e4-9ba58924ac3c"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AngularAcceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""48f3c03d-5994-4119-b053-7ed237b8e713"",
                    ""path"": ""<MagicLeapController>/deviceAngularAcceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AngularAcceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""e04e34c0-77e2-466f-9051-b9dba998acd9"",
                    ""path"": ""<XRController>{RightHand}/deviceAngularAcceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AngularAcceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""33a8ce26-45cc-4f74-b803-7428369c6fbe"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""5635980f-ce3d-410d-a1c2-7bdff3040a39"",
                    ""path"": ""<MagicLeapController>/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""14eb8cdc-9846-4246-861b-6baab01c1fba"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""0d619573-be39-44bd-9c2f-8448e8dcce13"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""286ff085-2f65-4aec-9acc-85eeaca37f79"",
                    ""path"": ""<MagicLeapController>/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""bedaf34a-3418-4675-91e2-22fb696b8e39"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6adeadd9-c3c1-4f04-9a93-f1d8c8c98551"",
                    ""path"": ""<MagicLeapController>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HMD"",
            ""id"": ""84acb5bd-7e0e-4a12-b5a1-0f3540ada4fc"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""5e2c2bc9-567c-444c-89e7-23c2e6f611cc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""0010a23d-24c3-4cc9-b7c4-3fbec4353b71"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e322891-a9b2-423a-b0b2-96a4d67fc09e"",
                    ""path"": ""<MagicLeapHeadset>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18b692f6-18f0-41ee-b494-5b6c778c73e1"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""462fbcca-3888-418f-b064-8d6e6094f032"",
                    ""path"": ""<MagicLeapHeadset>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76675273-1218-457c-bf8b-ec613659bd37"",
                    ""path"": ""<XRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Eyes"",
            ""id"": ""e2892f01-37bd-4161-825f-4741d39463e1"",
            ""actions"": [
                {
                    ""name"": ""Data"",
                    ""type"": ""Value"",
                    ""id"": ""4e0e9fc8-b071-48a9-a0b4-cee8df2aa187"",
                    ""expectedControlType"": ""Eyes"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""c7e35463-0720-42cc-bd53-6833954f3bdb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""abacd085-1f61-495a-87a4-cb9824ff0ccb"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fec52b17-7798-4c8e-af95-1b69946e0cdf"",
                    ""path"": ""<XRInputV1::MagicLeap::MagicLeapEyes>/eyesdata"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Data"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acc1ab74-2315-4f52-ad02-61d40239c614"",
                    ""path"": ""<EyeGaze>/pose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""986d5b69-5403-41ae-940d-286ea438f41f"",
                    ""path"": ""<EyeGaze>/pose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""cd640869-6651-4206-88d7-e452052bceb5"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""de73b087-da8e-4ce0-b7fa-fa88a99eea9a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""13029a31-47ed-4210-8c52-3346bc353414"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Keypose"",
                    ""type"": ""Value"",
                    ""id"": ""000a1cce-cfee-41a4-9ff5-a83d1c81e5bd"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ef5be79-52de-4dcd-b14e-2d1b418dde3b"",
                    ""path"": ""<MagicLeapHandDevice>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48e547fc-2db8-480c-9a24-6d8c88178c3d"",
                    ""path"": ""<MagicLeapHandDevice>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b66bcbd0-dccb-4f61-a563-f730d5084b36"",
                    ""path"": ""<MagicLeapHandDevice>{LeftHand}/keyPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Keypose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""42a4c021-efee-4dbd-bbe6-810cd925d45d"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""c40f930b-b6e7-4b00-834d-4aaff94533be"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""8a8c639a-11a7-4702-969a-2d10d3560a71"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Keypose"",
                    ""type"": ""Value"",
                    ""id"": ""e7cb9be8-f539-41a4-bc17-c50636537d3c"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""039954ad-6664-47ed-aba2-a3f686cf9b44"",
                    ""path"": ""<MagicLeapHandDevice>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30df3163-de43-44fa-b982-e632885a81ab"",
                    ""path"": ""<MagicLeapHandDevice>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63748f44-d0cf-4b91-952f-5fe7096ca6d3"",
                    ""path"": ""<MagicLeapHandDevice>{RightHand}/keyPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MagicLeap"",
                    ""action"": ""Keypose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MagicLeap"",
            ""bindingGroup"": ""MagicLeap"",
            ""devices"": [
                {
                    ""devicePath"": ""<MagicLeapController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<MagicLeapHeadset>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<MagicLeapHandDevice>{LeftHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<MagicLeapHandDevice>{RightHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRHMD>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_Position = m_Controller.FindAction("Position", throwIfNotFound: true);
        m_Controller_Rotation = m_Controller.FindAction("Rotation", throwIfNotFound: true);
        m_Controller_Velocity = m_Controller.FindAction("Velocity", throwIfNotFound: true);
        m_Controller_AngularVelocity = m_Controller.FindAction("AngularVelocity", throwIfNotFound: true);
        m_Controller_Acceleration = m_Controller.FindAction("Acceleration", throwIfNotFound: true);
        m_Controller_AngularAcceleration = m_Controller.FindAction("AngularAcceleration", throwIfNotFound: true);
        m_Controller_Menu = m_Controller.FindAction("Menu", throwIfNotFound: true);
        m_Controller_Bumper = m_Controller.FindAction("Bumper", throwIfNotFound: true);
        m_Controller_TriggerButton = m_Controller.FindAction("TriggerButton", throwIfNotFound: true);
        m_Controller_Trigger = m_Controller.FindAction("Trigger", throwIfNotFound: true);
        m_Controller_TriggerHold = m_Controller.FindAction("TriggerHold", throwIfNotFound: true);
        m_Controller_TouchpadPosition = m_Controller.FindAction("TouchpadPosition", throwIfNotFound: true);
        m_Controller_TouchpadClick = m_Controller.FindAction("TouchpadClick", throwIfNotFound: true);
        m_Controller_TouchpadTouch = m_Controller.FindAction("TouchpadTouch", throwIfNotFound: true);
        m_Controller_TouchpadForce = m_Controller.FindAction("TouchpadForce", throwIfNotFound: true);
        m_Controller_IsTracked = m_Controller.FindAction("IsTracked", throwIfNotFound: true);
        m_Controller_Haptic = m_Controller.FindAction("Haptic", throwIfNotFound: true);
        m_Controller_PointerPosition = m_Controller.FindAction("PointerPosition", throwIfNotFound: true);
        m_Controller_PointerRotation = m_Controller.FindAction("PointerRotation", throwIfNotFound: true);
        m_Controller_TrackingState = m_Controller.FindAction("TrackingState", throwIfNotFound: true);
        // HMD
        m_HMD = asset.FindActionMap("HMD", throwIfNotFound: true);
        m_HMD_Position = m_HMD.FindAction("Position", throwIfNotFound: true);
        m_HMD_Rotation = m_HMD.FindAction("Rotation", throwIfNotFound: true);
        // Eyes
        m_Eyes = asset.FindActionMap("Eyes", throwIfNotFound: true);
        m_Eyes_Data = m_Eyes.FindAction("Data", throwIfNotFound: true);
        m_Eyes_Position = m_Eyes.FindAction("Position", throwIfNotFound: true);
        m_Eyes_Rotation = m_Eyes.FindAction("Rotation", throwIfNotFound: true);
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_Position = m_LeftHand.FindAction("Position", throwIfNotFound: true);
        m_LeftHand_Rotation = m_LeftHand.FindAction("Rotation", throwIfNotFound: true);
        m_LeftHand_Keypose = m_LeftHand.FindAction("Keypose", throwIfNotFound: true);
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_Position = m_RightHand.FindAction("Position", throwIfNotFound: true);
        m_RightHand_Rotation = m_RightHand.FindAction("Rotation", throwIfNotFound: true);
        m_RightHand_Keypose = m_RightHand.FindAction("Keypose", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_Position;
    private readonly InputAction m_Controller_Rotation;
    private readonly InputAction m_Controller_Velocity;
    private readonly InputAction m_Controller_AngularVelocity;
    private readonly InputAction m_Controller_Acceleration;
    private readonly InputAction m_Controller_AngularAcceleration;
    private readonly InputAction m_Controller_Menu;
    private readonly InputAction m_Controller_Bumper;
    private readonly InputAction m_Controller_TriggerButton;
    private readonly InputAction m_Controller_Trigger;
    private readonly InputAction m_Controller_TriggerHold;
    private readonly InputAction m_Controller_TouchpadPosition;
    private readonly InputAction m_Controller_TouchpadClick;
    private readonly InputAction m_Controller_TouchpadTouch;
    private readonly InputAction m_Controller_TouchpadForce;
    private readonly InputAction m_Controller_IsTracked;
    private readonly InputAction m_Controller_Haptic;
    private readonly InputAction m_Controller_PointerPosition;
    private readonly InputAction m_Controller_PointerRotation;
    private readonly InputAction m_Controller_TrackingState;
    public struct ControllerActions
    {
        private @MagicLeapInputs m_Wrapper;
        public ControllerActions(@MagicLeapInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Controller_Position;
        public InputAction @Rotation => m_Wrapper.m_Controller_Rotation;
        public InputAction @Velocity => m_Wrapper.m_Controller_Velocity;
        public InputAction @AngularVelocity => m_Wrapper.m_Controller_AngularVelocity;
        public InputAction @Acceleration => m_Wrapper.m_Controller_Acceleration;
        public InputAction @AngularAcceleration => m_Wrapper.m_Controller_AngularAcceleration;
        public InputAction @Menu => m_Wrapper.m_Controller_Menu;
        public InputAction @Bumper => m_Wrapper.m_Controller_Bumper;
        public InputAction @TriggerButton => m_Wrapper.m_Controller_TriggerButton;
        public InputAction @Trigger => m_Wrapper.m_Controller_Trigger;
        public InputAction @TriggerHold => m_Wrapper.m_Controller_TriggerHold;
        public InputAction @TouchpadPosition => m_Wrapper.m_Controller_TouchpadPosition;
        public InputAction @TouchpadClick => m_Wrapper.m_Controller_TouchpadClick;
        public InputAction @TouchpadTouch => m_Wrapper.m_Controller_TouchpadTouch;
        public InputAction @TouchpadForce => m_Wrapper.m_Controller_TouchpadForce;
        public InputAction @IsTracked => m_Wrapper.m_Controller_IsTracked;
        public InputAction @Haptic => m_Wrapper.m_Controller_Haptic;
        public InputAction @PointerPosition => m_Wrapper.m_Controller_PointerPosition;
        public InputAction @PointerRotation => m_Wrapper.m_Controller_PointerRotation;
        public InputAction @TrackingState => m_Wrapper.m_Controller_TrackingState;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRotation;
                @Velocity.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnVelocity;
                @Velocity.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnVelocity;
                @Velocity.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnVelocity;
                @AngularVelocity.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAngularVelocity;
                @AngularVelocity.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAngularVelocity;
                @AngularVelocity.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAngularVelocity;
                @Acceleration.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAcceleration;
                @AngularAcceleration.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAngularAcceleration;
                @AngularAcceleration.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAngularAcceleration;
                @AngularAcceleration.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAngularAcceleration;
                @Menu.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMenu;
                @Bumper.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnBumper;
                @Bumper.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnBumper;
                @Bumper.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnBumper;
                @TriggerButton.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTriggerButton;
                @TriggerButton.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTriggerButton;
                @TriggerButton.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTriggerButton;
                @Trigger.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTrigger;
                @TriggerHold.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTriggerHold;
                @TriggerHold.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTriggerHold;
                @TriggerHold.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTriggerHold;
                @TouchpadPosition.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadPosition;
                @TouchpadPosition.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadPosition;
                @TouchpadPosition.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadPosition;
                @TouchpadClick.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadClick;
                @TouchpadClick.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadClick;
                @TouchpadClick.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadClick;
                @TouchpadTouch.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadTouch;
                @TouchpadTouch.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadTouch;
                @TouchpadTouch.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadTouch;
                @TouchpadForce.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadForce;
                @TouchpadForce.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadForce;
                @TouchpadForce.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTouchpadForce;
                @IsTracked.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnIsTracked;
                @IsTracked.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnIsTracked;
                @IsTracked.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnIsTracked;
                @Haptic.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnHaptic;
                @Haptic.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnHaptic;
                @Haptic.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnHaptic;
                @PointerPosition.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPointerPosition;
                @PointerRotation.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPointerRotation;
                @PointerRotation.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPointerRotation;
                @PointerRotation.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnPointerRotation;
                @TrackingState.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTrackingState;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Velocity.started += instance.OnVelocity;
                @Velocity.performed += instance.OnVelocity;
                @Velocity.canceled += instance.OnVelocity;
                @AngularVelocity.started += instance.OnAngularVelocity;
                @AngularVelocity.performed += instance.OnAngularVelocity;
                @AngularVelocity.canceled += instance.OnAngularVelocity;
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @AngularAcceleration.started += instance.OnAngularAcceleration;
                @AngularAcceleration.performed += instance.OnAngularAcceleration;
                @AngularAcceleration.canceled += instance.OnAngularAcceleration;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @Bumper.started += instance.OnBumper;
                @Bumper.performed += instance.OnBumper;
                @Bumper.canceled += instance.OnBumper;
                @TriggerButton.started += instance.OnTriggerButton;
                @TriggerButton.performed += instance.OnTriggerButton;
                @TriggerButton.canceled += instance.OnTriggerButton;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @TriggerHold.started += instance.OnTriggerHold;
                @TriggerHold.performed += instance.OnTriggerHold;
                @TriggerHold.canceled += instance.OnTriggerHold;
                @TouchpadPosition.started += instance.OnTouchpadPosition;
                @TouchpadPosition.performed += instance.OnTouchpadPosition;
                @TouchpadPosition.canceled += instance.OnTouchpadPosition;
                @TouchpadClick.started += instance.OnTouchpadClick;
                @TouchpadClick.performed += instance.OnTouchpadClick;
                @TouchpadClick.canceled += instance.OnTouchpadClick;
                @TouchpadTouch.started += instance.OnTouchpadTouch;
                @TouchpadTouch.performed += instance.OnTouchpadTouch;
                @TouchpadTouch.canceled += instance.OnTouchpadTouch;
                @TouchpadForce.started += instance.OnTouchpadForce;
                @TouchpadForce.performed += instance.OnTouchpadForce;
                @TouchpadForce.canceled += instance.OnTouchpadForce;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @Haptic.started += instance.OnHaptic;
                @Haptic.performed += instance.OnHaptic;
                @Haptic.canceled += instance.OnHaptic;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
                @PointerRotation.started += instance.OnPointerRotation;
                @PointerRotation.performed += instance.OnPointerRotation;
                @PointerRotation.canceled += instance.OnPointerRotation;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);

    // HMD
    private readonly InputActionMap m_HMD;
    private IHMDActions m_HMDActionsCallbackInterface;
    private readonly InputAction m_HMD_Position;
    private readonly InputAction m_HMD_Rotation;
    public struct HMDActions
    {
        private @MagicLeapInputs m_Wrapper;
        public HMDActions(@MagicLeapInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_HMD_Position;
        public InputAction @Rotation => m_Wrapper.m_HMD_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_HMD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HMDActions set) { return set.Get(); }
        public void SetCallbacks(IHMDActions instance)
        {
            if (m_Wrapper.m_HMDActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_HMDActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_HMDActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_HMDActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_HMDActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_HMDActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_HMDActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_HMDActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public HMDActions @HMD => new HMDActions(this);

    // Eyes
    private readonly InputActionMap m_Eyes;
    private IEyesActions m_EyesActionsCallbackInterface;
    private readonly InputAction m_Eyes_Data;
    private readonly InputAction m_Eyes_Position;
    private readonly InputAction m_Eyes_Rotation;
    public struct EyesActions
    {
        private @MagicLeapInputs m_Wrapper;
        public EyesActions(@MagicLeapInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Data => m_Wrapper.m_Eyes_Data;
        public InputAction @Position => m_Wrapper.m_Eyes_Position;
        public InputAction @Rotation => m_Wrapper.m_Eyes_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Eyes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EyesActions set) { return set.Get(); }
        public void SetCallbacks(IEyesActions instance)
        {
            if (m_Wrapper.m_EyesActionsCallbackInterface != null)
            {
                @Data.started -= m_Wrapper.m_EyesActionsCallbackInterface.OnData;
                @Data.performed -= m_Wrapper.m_EyesActionsCallbackInterface.OnData;
                @Data.canceled -= m_Wrapper.m_EyesActionsCallbackInterface.OnData;
                @Position.started -= m_Wrapper.m_EyesActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_EyesActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_EyesActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_EyesActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_EyesActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_EyesActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_EyesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Data.started += instance.OnData;
                @Data.performed += instance.OnData;
                @Data.canceled += instance.OnData;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public EyesActions @Eyes => new EyesActions(this);

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_Position;
    private readonly InputAction m_LeftHand_Rotation;
    private readonly InputAction m_LeftHand_Keypose;
    public struct LeftHandActions
    {
        private @MagicLeapInputs m_Wrapper;
        public LeftHandActions(@MagicLeapInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_LeftHand_Position;
        public InputAction @Rotation => m_Wrapper.m_LeftHand_Rotation;
        public InputAction @Keypose => m_Wrapper.m_LeftHand_Keypose;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRotation;
                @Keypose.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnKeypose;
                @Keypose.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnKeypose;
                @Keypose.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnKeypose;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Keypose.started += instance.OnKeypose;
                @Keypose.performed += instance.OnKeypose;
                @Keypose.canceled += instance.OnKeypose;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // RightHand
    private readonly InputActionMap m_RightHand;
    private IRightHandActions m_RightHandActionsCallbackInterface;
    private readonly InputAction m_RightHand_Position;
    private readonly InputAction m_RightHand_Rotation;
    private readonly InputAction m_RightHand_Keypose;
    public struct RightHandActions
    {
        private @MagicLeapInputs m_Wrapper;
        public RightHandActions(@MagicLeapInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_RightHand_Position;
        public InputAction @Rotation => m_Wrapper.m_RightHand_Rotation;
        public InputAction @Keypose => m_Wrapper.m_RightHand_Keypose;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotation;
                @Keypose.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnKeypose;
                @Keypose.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnKeypose;
                @Keypose.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnKeypose;
            }
            m_Wrapper.m_RightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Keypose.started += instance.OnKeypose;
                @Keypose.performed += instance.OnKeypose;
                @Keypose.canceled += instance.OnKeypose;
            }
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);
    private int m_MagicLeapSchemeIndex = -1;
    public InputControlScheme MagicLeapScheme
    {
        get
        {
            if (m_MagicLeapSchemeIndex == -1) m_MagicLeapSchemeIndex = asset.FindControlSchemeIndex("MagicLeap");
            return asset.controlSchemes[m_MagicLeapSchemeIndex];
        }
    }
    public interface IControllerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnVelocity(InputAction.CallbackContext context);
        void OnAngularVelocity(InputAction.CallbackContext context);
        void OnAcceleration(InputAction.CallbackContext context);
        void OnAngularAcceleration(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnBumper(InputAction.CallbackContext context);
        void OnTriggerButton(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnTriggerHold(InputAction.CallbackContext context);
        void OnTouchpadPosition(InputAction.CallbackContext context);
        void OnTouchpadClick(InputAction.CallbackContext context);
        void OnTouchpadTouch(InputAction.CallbackContext context);
        void OnTouchpadForce(InputAction.CallbackContext context);
        void OnIsTracked(InputAction.CallbackContext context);
        void OnHaptic(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnPointerRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
    }
    public interface IHMDActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IEyesActions
    {
        void OnData(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnKeypose(InputAction.CallbackContext context);
    }
    public interface IRightHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnKeypose(InputAction.CallbackContext context);
    }
}
